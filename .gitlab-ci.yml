image: alpine:latest

stages:
  - build-test-deploy

build:
  image: golang:latest
  stage: build-test-deploy
  only:
    - master
    - merge_requests
  before_script:
    - apt update
    - apt install zip -y
  script:
    - arch=amd64 ./scripts/build.sh
  artifacts:
    expire_in: 1 week
    paths:
      - internal/app/lambda/*/*.zip

build-prod:
  image: golang:latest
  stage: build-test-deploy
  variables:
    ENV: production
  only:
    - master
  needs:
    - unit-test
    - acceptance-test
  before_script:
    - apt update
    - apt install zip -y
  script:
    - ./scripts/build.sh
  artifacts:
    expire_in: 1 week
    paths:
      - internal/app/lambda/*/*.zip

unit-test:
  image: golang:latest
  stage: build-test-deploy
  only:
    - master
    - merge_requests
  before_script:
    - go install gotest.tools/gotestsum@latest
  script:
    - gotestsum --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: report.xml

acceptance-test:
  image: docker:24.0.5
  stage: build-test-deploy
  only:
    - master
    - merge_requests
  variables:
    ENV: local
    AWS_ACCESS_KEY_ID: test
    AWS_SECRET_ACCESS_KEY: test
    CDK_DEPLOY_ACCOUNT: 000000000000
    CDK_DEPLOY_REGION: eu-west-1
    AWS_DEFAULT_REGION: eu-west-1
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    LOCALSTACK_HOSTNAME: localhost.localstack.cloud
    HOSTNAME_EXTERNAL: localhost.localstack.cloud
  needs:
    - build
  services:
    - name: docker:24.0.5-dind
      alias: docker
      command: ["--tls=false"]
  before_script:
    - apk update
    - apk add --update gcc musl-dev linux-headers py3-pip python3 python3-dev npm go
    - npm install -g aws-cdk-local aws-cdk newman
    - python3 -m pip install awscli
  script:
    - sleep 30
    - dind_ip="$(getent hosts docker | cut -d' ' -f1)"
    - DOCKER_HOST="tcp://${dind_ip}:2375"
    - echo "${dind_ip} localhost.localstack.cloud" >> /etc/hosts
    - cat /etc/hosts
    - docker pull localstack/localstack-pro:latest
    - docker-compose -f localstack.compose up -d
    - aws configure set aws_access_key_id "test" && aws configure set aws_secret_access_key "test" && aws configure set region "eu-west-1" && aws configure set output "json"
    - ./scripts/localstack-deploy.sh
    - sleep 10
    - newman run https://api.getpostman.com/collections/$POSTMAN_COLLECTION_ID?apikey=$POSTMAN_API_KEY --environment https://api.getpostman.com/environments/$POSTMAN_ENV_ID?apikey=$POSTMAN_API_KEY

deploy-test:
  stage: build-test-deploy
  variables:
    ENV: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
  needs:
    - build
  dependencies:
    - build
  before_script:
    - apk update
    - apk add --update npm go curl jq
    - npm install -g aws-cdk-local aws-cdk
  script:
    - ./scripts/deploy.sh
    - ./scripts/test-env-msg.sh
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
      allow_failure: false

teardown-test:
  stage: build-test-deploy
  variables:
    ENV: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
  needs:
    - deploy-test
    - build
  dependencies:
    - build
  before_script:
    - apk update
    - apk add --update npm go
    - npm install -g aws-cdk-local aws-cdk
  script:
    - cdk destroy --force
  allow_failure: false
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: manual
      allow_failure: true

deploy-staging:
  stage: build-test-deploy
  variables:
    ENV: staging
  only:
    - master
  needs:
    - unit-test
    - acceptance-test
    - build
  dependencies:
    - build
  before_script:
    - apk update
    - apk add --update npm go
    - npm install -g aws-cdk-local aws-cdk
  script:
    - ./scripts/deploy.sh

deploy-prod:
  stage: build-test-deploy
  variables:
    ENV: production
  needs:
    - build-prod
    - unit-test
    - acceptance-test
    - deploy-staging
  dependencies:
    - build-prod
  before_script:
    - apk update
    - apk add --update npm go
    - npm install -g aws-cdk-local aws-cdk
  script:
    - ./scripts/deploy.sh
  allow_failure: false
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: manual
      allow_failure: true

sonarqube-check:
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  stage: build-test-deploy
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - master
